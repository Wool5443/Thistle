AST ::= G
G ::= function+

function ::= 'fn' function_signature {body | ';'}
function_signature ::= name '(' function_signature_args? ')'
function_signature_args ::= name_type {',' name_type}*

if_while ::= if | while

while ::= 'while' expression while_body
while_body ::= body

if ::= 'if' expression if_body
if_body ::= body else?
else ::= 'else' {if | body}

body ::= '{' {statement*} '}'

statement ::= {{expression | return_statement} ';'} | if_while

return_statement ::= 'return' expression?

expression ::= math_expression |
               assign_expression |
               function_call |
               string

function_call ::= name '(' function_call_args? ')'
function_call_args ::= expression {',' expression}*

assign_expression ::= 'let' {name_type | name} {'=' expression}?

math_expression ::= X
X ::= X {'xor' X}*
O ::= CMP {'or' CMP}*
CMP ::= A {['==', '>', '>=', '<', '<=']A}*
A ::= AS {'and' AS}*
AS ::= E {'='E}*
E ::= T {['+', '-']T}*
T ::= D {['*', '/']D}*
D ::= P {'^'P}*
P ::= '-' P | '!' P | '(' expression ')' | identifier

identifier ::= number | name
name_type ::= name ':' name
name ::= [A-Za-z_][A-Za-z_0-9]*
string ::= '"' any '"'
number ::= strtol
